Steps for Salesforce Mobile SDK integration

1. Install CocoaPods if you don't have it
2. Create a file called 'Podfile' if needed
3. Add this line to the 'Podfile' 
	pod 'SalesforceMobileSDK-iOS'
4. Run 'pod install' --> This will create an xcode workspace that you should now do all work in
5. Add an Objective-C file. Make sure to add it to the folder where all of your swift files are located (probably the myproject/ directory) This will ask you if you want to also add a bridging header file. Click yes.
6. Delete the objective-c file and add the following to the bridging header file for basic api functionality:
	#import "SFRestAPI+Blocks.h"
	#import "SFAuthenticationManager.h"
	#import "SFOAuthInfo.h"
	#import "SFUserAccountManager.h"
	#import "SFOAuthCredentials.h"
	#import "SalesforceSDKManager.h"

Extra: you can add additional Objective-C header files here for more Salesforce functionality.
	- For modifying the custom error handling messages:
		#import "SFAuthErrorHandler.h"
		#import "SFAuthErrorHandlerList.h"
	- For push notifications from Salesforce:
		#import "SFPushNotificationManager.h"

7.In AppDelegate, add the classes SFAuthenticationManager and SFUserAccountManagerDelegate as parent classes
8.Initialize the SFAuthenticationManager and SFUserAccountManager
9. In the init function add the appDelegate as the delegate for the managers
10. Set the authScopes (provide link to authScopes reference here).
11.Set the oauthClientId and the oauthCompletionUrl generated by salesforce when you register your connected app
12.Add the login method and that's it!
13. For custom login domains:
	- go to the Info.plist file under Supporting Files/ directory and add a new key
		KeyName: SFDCOAuthLoginHost, KeyVal: "yourDomain.my.salesforce.com" //leave off the https://
	- then run the app in simulator. Hit Command + Shift + H and then manually delete the app. Then rebuild the app.
	- you should then be redirected to your custom domain
14. Check out the repo for example code for running queries and posting data