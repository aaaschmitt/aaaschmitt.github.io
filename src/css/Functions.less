/**
 * Classes for handling cross browser compatibility of basic actions
 * and other utilities.
 */

/**
 * A linear gradient that accepts any number of arguments
 */
.linear-grad(@value1,@value2:X,...) {

	@value: ~`"@{arguments}".replace(/[\[\]]|\,\sX/g, '')`;

	background: -webkit-linear-gradient(@value); /* For Safari 5.1 to 6.0 */
	background: -o-linear-gradient(@value); /* For Opera 11.1 to 12.0 */
	background: -moz-linear-gradient(@value); /* For Firefox 3.6 to 15 */
	background: linear-gradient(@value); /* Standard syntax */
}
/**
 * Animations
 */
.scaleY(@factor) {
	-webkit-transform: scaleY(@factor); /* Safari */
    transform: scaleY(@factor);
}
.scale(@x, @y) {
	-ms-transform: scale(@x, @y); /* IE 9 */
    -webkit-transform: scale(@x, @y); /* Safari */
    transform: scale(@x, @y);
}
.translate(@x, @y) {
	-ms-transform: translate(@x,@y); /* IE 9 */
   	-webkit-transform: translate(@x,@y); /* Safari */
    transform: translate(@x,@y);
}
.transition() {
	-webkit-transform: rotate(360deg) scale(2);
    -moz-transform: rotate(360deg) scale(2);
    -o-transform: rotate(360deg) scale(2);
    -ms-transform: rotate(360deg) scale(2);
}
.trans-scale(@tranX, @tranY, @scalX, @scalY) {
	-ms-transform: translate(@tranX,@tranY) scale(@scalX, @scalY); /* IE 9 */
   	-webkit-transform: translate(@tranX,@tranY) scale(@scalX, @scalY); /* Safari */
    transform: translate(@tranX,@tranY) scale(@scalX, @scalY);
}
.rotate(@deg) {
	-webkit-transform: rotate(@deg);
    -moz-transform: rotate(@deg);
    -o-transform: rotate(@deg);
    -ms-transform: rotate(@deg);
    transfrom: rotate(@deg);
}
.rotateY(@deg) {
	-webkit-transform: rotateY(@deg);
    -moz-transform: rotateY(@deg);
    -o-transform: rotateY(@deg);
    -ms-transform: rotateY(@deg);
    transfrom: rotateY(@deg);
}
.column-span(@val) {
	-webkit-column-span: @val;
	column-span: @val;
}
/**
 * A less loop that takes in a mixin and 
 * a number of times to repeat that mixin
 */
.loop-mixin(@counter, @mixin) when (@counter > 0) {
  .loop((@counter - 1));
  @class();
}
/**
 * Generate a random number and return it as @randomNum
 * Useful if you want to use a single random num in multiple places
 */
.constRandom() {
    @randomNum: `Math.floor(Math.random() * (5 - 1)) + 1`;
}
